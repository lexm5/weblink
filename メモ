useStateとuseEffectの役割の違い
1. useState
役割：コンポーネントの状態を保持し、状態が変わったら再レンダリングを引き起こすために使います。
特徴：useStateは、値が変わるたびにそのコンポーネントが再レンダリングされます。レンダリングが起きるたびに状態が保持されることが保証されます。
2. useEffect
役割：コンポーネントがレンダリングされたとき、または状態やプロパティが変更されたときに実行される**副作用（サイドエフェクト）**を処理するために使います。
特徴：useEffectは、データのフェッチ、ローカルストレージへの保存、イベントリスナーの追加など、レンダリングとは直接関係のない処理を行うのに適しています。
なぜuseEffectが必要か
useStateは単に「状態の保持」に適していますが、その状態が変更されたときに副作用として実行したい処理がある場合にはuseEffectが適しています。具体的には次のようなケースです。

状態の変更に伴う「副作用」を管理するため
例えば、今回のケースでは「カートの内容が変わるたびに、ローカルストレージにカートの状態を保存する」という要件がありました。このように、状態の変化に伴って何か別の処理を行う必要がある場合には、useEffectが適しています。

useStateで状態を保持するだけではダメな理由
useStateだけでは、状態の変更に伴って発生する「副作用」を管理する仕組みがありません。例えば、カートに商品を追加するという「状態の更新」はuseStateで行えますが、その更新に応じてローカルストレージに保存する処理を自動で行うことはできません。useEffectを使うことで、特定の状態が変わったときにだけその「副作用」を処理することが可能になります。

